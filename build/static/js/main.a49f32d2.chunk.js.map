{"version":3,"sources":["components/Students.js","components/DisplayName.js","components/randomNoRep.js","components/randomRep.js","components/ButtonNoRep.js","components/ButtonRep.js","App.js","serviceWorker.js","index.js"],"names":["studentList","name","counter","DisplayName","react_default","a","createElement","this","props","student","Component","randomNoRep","i","availableStudents","length","push","alert","window","close","randomIndex","Math","floor","random","randomRep","ButtonNoRep","className","onClick","ButtonRep","App","state","nowSelectedStudent","components_DisplayName","components_ButtonNoRep","setState","bind","components_ButtonRep","bsStyle","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAmBeA,SAnBK,CAChB,CAACC,KAAM,OAAQC,QAAS,GACxB,CAACD,KAAM,OAAQC,QAAS,GACxB,CAACD,KAAM,OAAQC,QAAS,GACxB,CAACD,KAAM,QAASC,QAAS,GACzB,CAACD,KAAM,SAAUC,QAAS,GAC1B,CAACD,KAAM,OAAQC,QAAS,GACxB,CAACD,KAAM,OAAQC,QAAS,GACxB,CAACD,KAAM,OAAQC,QAAS,GACxB,CAACD,KAAM,OAAQC,QAAS,GACxB,CAACD,KAAM,QAASC,QAAS,GACzB,CAACD,KAAM,SAAUC,QAAS,GAC1B,CAACD,KAAM,SAAUC,QAAS,GAC1B,CAACD,KAAM,OAAQC,QAAS,GACxB,CAACD,KAAM,SAAUC,QAAS,GAC1B,CAACD,KAAM,QAASC,QAAS,GACzB,CAACD,KAAM,SAAUC,QAAS,KCNfC,mLANP,OACIC,EAAAC,EAAAC,cAAA,UAAKC,KAAKC,MAAMC,gBAHFC,aCuBXC,MAzBf,SAAqBX,GACjB,IAAIY,EAEEC,EAAoB,GAE1B,IAAID,EAAE,EAAEA,EAAEZ,EAAYc,OAAOF,IACK,IAA3BZ,EAAYY,GAAGV,SACdW,EAAkBE,KAAKf,EAAYY,IAI3C,GAAgC,IAA7BC,EAAkBC,OAGjB,OAFAE,MAAM,yCACNA,MAAM,cACCC,OAAOC,QAGlB,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWT,EAAkBC,QAKjE,OAFAD,EAAkBM,GAAajB,UAExBW,EAAkBM,IChBdI,MANf,SAAmBvB,GAGf,OAAOA,EAFaoB,KAAKC,MAAMD,KAAKE,SAAWtB,EAAYc,UCWhDU,mLARP,OACIpB,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,kBAAkBC,QAASnB,KAAKC,MAAMkB,SAAxD,wBAHchB,aCUXiB,mLARP,OACIvB,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,kBAAkBC,QAASnB,KAAKC,MAAMkB,SAAxD,qBAHYhB,aCiDTkB,6MAvCbC,MAAQ,CACNC,mBAAoB,CAAC7B,KAAM,8EAI3B,OACEG,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,cAKpBrB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyB,EAAD,CAAatB,QAASF,KAAKsB,MAAMC,mBAAmB7B,QAGtDG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0B,EAAD,CAAaN,QAAS,WACpBnB,KAAK0B,SAAS,CACZH,mBAAoBnB,EAAYX,MAElCkC,KAAK3B,SAGTH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAAD,CAAWC,QAAQ,UAAUV,QAAS,WACpCnB,KAAK0B,SAAS,CACZH,mBAAoBP,EAAUvB,MAEhCkC,KAAK3B,kBAhCGG,aCGE2B,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a49f32d2.chunk.js","sourcesContent":["const studentList = [\n    {name: 'Evan', counter: 0},\n    {name: 'Kyle', counter: 0},\n    {name: 'Alex', counter: 0},\n    {name: 'Allie', counter: 0},\n    {name: 'Wiliam', counter: 0},\n    {name: 'Zeyu', counter: 0},\n    {name: 'Hope', counter: 0},\n    {name: 'Thea', counter: 0},\n    {name: 'Luna', counter: 0},\n    {name: 'Bosen', counter: 0},\n    {name: 'Joseph', counter: 0},\n    {name: 'Celine', counter: 0},\n    {name: 'Vera', counter: 0},\n    {name: 'Ashley', counter: 0},\n    {name: 'Jenny', counter: 0},\n    {name: 'Andrea', counter: 0},\n];\n\nexport default studentList;\n","import React, { Component } from 'react';\n\nclass DisplayName extends Component {\n    render() { \n        return (\n            <h1>{this.props.student}</h1>\n        );\n    }\n}\n \nexport default DisplayName;","function randomNoRep(studentList) {\n    var i;\n    //create array with available students\n    const availableStudents = [];\n    //calculate available students\n    for(i=0;i<studentList.length;i++){\n        if(studentList[i].counter === 0){\n            availableStudents.push(studentList[i]);\n        }\n    }\n    //if all students have been selected, unable to select\n    if(availableStudents.length === 0){\n        alert('There are no more available students.');\n        alert('Good bye. ')\n        return window.close();\n    }\n    // generate random index\n    const randomIndex = Math.floor(Math.random() * availableStudents.length);\n\n    // add 1 to counter after student has been chosen\n    availableStudents[randomIndex].counter ++;\n    //return the random index\n    return availableStudents[randomIndex];\n}\n\nexport default randomNoRep;\n","function randomRep(studentList) {\n    const randomIndex = Math.floor(Math.random() * studentList.length);\n    //return random index\n    return studentList[randomIndex];\n}\n\nexport default randomRep;\n","import React, { Component } from 'react';\n\nclass ButtonNoRep extends Component {\n    render() { \n        return (\n            <button className=\"btn btn-primary\" onClick={this.props.onClick} >\n                No Repetition\n            </button>\n        );\n    }\n}\n \nexport default ButtonNoRep;","import React, { Component } from 'react';\n\nclass ButtonRep extends Component {\n    render() { \n        return (\n            <button className=\"btn btn-success\" onClick={this.props.onClick} >\n                Repetition\n            </button>\n        );\n    }\n}\n \nexport default ButtonRep;","import React, { Component } from 'react';\nimport './App.css';\nimport studentList from './components/Students';\nimport DisplayName from './components/DisplayName';\nimport randomNoRep from './components/randomNoRep';\nimport randomRep from './components/randomRep';\nimport ButtonNoRep from './components/ButtonNoRep';\nimport ButtonRep from './components/ButtonRep';\n\nclass App extends Component {\n\n  //functions\n  state = {\n    nowSelectedStudent: {name: \" \"},\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* leftovers */}\n          {/* <img src={'https://i.pinimg.com/originals/c5/67/60/c56760404cac5ca001c2ba11e330d606.jpg'} className=\"App-logo\" alt=\"logo\" /> */}\n          \n\n      <div>\n        <DisplayName student={this.state.nowSelectedStudent.name} />\n      </div>    \n\n      <div>\n        <ButtonNoRep onClick={function () {\n          this.setState({\n            nowSelectedStudent: randomNoRep(studentList),\n          })\n        }.bind(this)} />\n      </div>\n\n      <div>\n        <ButtonRep bsStyle=\"success\" onClick={function () {\n          this.setState({\n            nowSelectedStudent: randomRep(studentList),\n          })\n        }.bind(this)} />\n      </div>\n\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}